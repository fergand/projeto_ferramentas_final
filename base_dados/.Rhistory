casos_mes_ano %>%
ggplot(aes(x = datahora, y = total_casos)) +
geom_density(fill = cores[8], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
labs(x = "Ano/mês", y = "Total de casos", title = "Total de casos no estado de São Paulo")+
# Total de novos casos
novos_casos_mes_ano <- dados_covid_sp_tratado %>%
group_by(datahora) %>%
summarise(novos_casos = sum(casos_novos))
# plot do gráfico: total de casos acumulado
casos_mes_ano %>%
ggplot(aes(x = datahora, y = total_casos)) +
geom_density(fill = cores[8], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
labs(x = "Ano/mês", y = "Total de casos", title = "Total de casos no estado de São Paulo")+
# Total de novos casos
novos_casos_mes_ano <- dados_covid_sp_tratado %>%
group_by(datahora) %>%
summarise(novos_casos = sum(casos_novos))
# plot do gráfico: total de casos acumulado
casos_mes_ano %>%
ggplot(aes(x = datahora, y = total_casos)) +
geom_density(fill = cores[8], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
labs(x = "Ano/mês", y = "Total de casos", title = "Total de casos no estado de São Paulo")+
# Total de novos casos
novos_casos_mes_ano <- dados_covid_sp_tratado %>%
group_by(datahora) %>%
summarise(novos_casos = sum(casos_novos))
# plot do gráfico: total de casos acumulado
casos_mes_ano %>%
ggplot(aes(x = datahora, y = total_casos)) +
geom_density(fill = cores[8], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
labs(x = "Ano/mês", y = "Total de casos", title = "Total de casos no estado de São Paulo")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# plot do gráfico: total de casos acumulado
casos_mes_ano %>%
ggplot(aes(x = datahora, y = total_casos)) +
geom_density(fill = cores[8], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
labs(x = "Ano/mês", y = "Total de casos", title = "Total de casos no estado de São Paulo")
novos_casos_mes_ano %>%
ggplot(aes(x = datahora, y = novos_casos)) +
geom_density(fill = cores[1], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
labs(x = "Ano/mês", y = "Total de casos", title = "Total de novos casos no estado de São Paulo")+
novos_casos_mes_ano %>%
ggplot(aes(x = datahora, y = novos_casos)) +
geom_density(fill = cores[1], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
labs(x = "Ano/mês", y = "Total de casos", title = "Total de novos casos no estado de São Paulo")
novos_casos_mes_ano %>%
ggplot(aes(x = datahora, y = novos_casos)) +
geom_density(fill = cores[1], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
labs(x = "Ano/mês", y = "Total de casos", title = "Total de novos casos no estado de São Paulo")
# plot do gráfico: total de casos acumulado
casos_mes_ano %>%
ggplot(aes(x = datahora, y = total_casos)) +
geom_density(fill = cores[8], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
labs(x = "Ano/mês", y = "Total de casos", title = "Total de casos no estado de São Paulo")
novos_casos_mes_ano %>%
ggplot(aes(x = datahora, y = novos_casos)) +
geom_density(fill = cores[1], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
labs(x = "Ano/mês", y = "Total de casos", title = "Total de novos casos no estado de São Paulo")
novos_casos_mes_ano %>%
ggplot(aes(x = datahora, y = novos_casos)) +
geom_area(fill = cores[1], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
labs(x = "Ano/mês", y = "Total de casos", title = "Total de novos casos no estado de São Paulo")
novos_casos_mes_ano %>%
ggplot(aes(x = datahora, y = novos_casos)) +
geom_bar(fill = cores[1], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
labs(x = "Ano/mês", y = "Total de casos", title = "Total de novos casos no estado de São Paulo")
source("D:/Mestrado/1Sem_23/Ferramentas computacionais/projeto_final/base_dados/projeto_covid_sp.R", echo=TRUE)
novos_casos_mes_ano %>%
ggplot(aes(x = datahora, y = novos_casos)) +
geom_density(fill = cores[1], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
labs(x = "Ano/mês", y = "Total de casos", title = "Total de novos casos no estado de São Paulo")
# plot do gráfico: total de casos acumulado
casos_mes_ano %>%
ggplot(aes(x = datahora, y = total_casos)) +
geom_density(fill = cores[8], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
labs(x = "Ano/mês", y = "Total de casos", title = "Total de casos no estado de São Paulo")
novos_casos_mes_ano %>%
ggplot(aes(x = datahora, y = novos_casos)) +
geom_density(fill = cores[1], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
labs(x = "Ano/mês", y = "Total de casos", title = "Total de novos casos no estado de São Paulo")
novos_casos_mes_ano %>%
ggplot(aes(x = datahora, y = novos_casos)) +
geom_density(fill = cores[1], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
labs(x = "Ano/mês", y = "Total de casos", title = "Total de novos casos por dia no estado de São Paulo")
novos_casos_mes_ano %>%
ggplot(aes(x = datahora, y = novos_casos)) +
geom_density(fill = cores[1], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
labs(x = "Ano/mês", y = "Total de casos", title = "Novos casos por dia no estado de São Paulo")
# plot do gráfico: total de casos acumulado
casos_mes_ano %>%
ggplot(aes(x = datahora, y = total_casos)) +
geom_density(fill = cores[8], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
labs(x = "Ano/mês", y = "Total de casos", title = "Total de casos no estado de São Paulo")
novos_casos_mes_ano %>%
ggplot(aes(x = datahora, y = novos_casos)) +
geom_density(fill = cores[1], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
labs(x = "Ano/mês", y = "Total de casos", title = "Novos casos por dia no estado de São Paulo")
# plot do gráfico: total de casos acumulado
casos_mes_ano %>%
ggplot(aes(x = datahora, y = total_casos)) +
geom_density(fill = cores[8], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
theme_bw()+
labs(x = "Ano/mês", y = "Total de casos", title = "Total de casos no estado de São Paulo")
novos_casos_mes_ano %>%
ggplot(aes(x = datahora, y = novos_casos)) +
geom_density(fill = cores[1], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
theme_bw()+
labs(x = "Ano/mês", y = "Total de casos", title = "Novos casos por dia no estado de São Paulo")
novos_casos_mes_ano %>%
ggplot(aes(x = datahora, y = novos_casos)) +
geom_density(fill = cores[1], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
theme_bw()+
theme(panel.grid = element_blank(),  # Remove as linhas de grade
plot.background = element_rect(fill = "white"),  # Define o fundo branco
axis.text.y = element_text(size = 8))+ # Ajusta o tamanho do texto no eixo y
labs(x = "Ano/mês", y = "Total de casos", title = "Novos casos por dia no estado de São Paulo")
novos_casos_mes_ano %>%
ggplot(aes(x = datahora, y = novos_casos)) +
geom_density(fill = cores[1], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
theme_bw()+
theme(panel.grid = element_blank(),  # Remove as linhas de grade
plot.background = element_rect(fill = "white"),  # Define o fundo branco
axis.text.y = element_text(size = 5))+ # Ajusta o tamanho do texto no eixo y
labs(x = "Ano/mês", y = "Total de casos", title = "Novos casos por dia no estado de São Paulo")
novos_casos_mes_ano %>%
ggplot(aes(x = datahora, y = novos_casos)) +
geom_density(fill = cores[1], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
theme_bw()+
labs(x = "Ano/mês", y = "Total de casos", title = "Novos casos por dia no estado de São Paulo")
novos_casos_mes_ano %>%
ggplot(aes(x = datahora, y = novos_casos)) +
geom_density(fill = cores[1], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
theme_bw()+
labs(x = "Ano/mês", y = "Total de casos", title = "Novos casos por dia no estado de São Paulo")
novos_casos_mes_ano %>%
ggplot(aes(x = datahora, y = novos_casos)) +
geom_density(fill = cores[1], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
theme_bw()+
theme(panel.grid = element_blank(),  # Remove as linhas de grade
plot.background = element_rect(fill = "white")) +
labs(x = "Ano/mês", y = "Total de casos", title = "Novos casos por dia no estado de São Paulo")
# plot do gráfico: total de casos acumulado
casos_mes_ano %>%
ggplot(aes(x = datahora, y = total_casos)) +
geom_density(fill = cores[8], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
theme_bw()+
theme(panel.grid = element_blank(),  # Remove as linhas de grade
plot.background = element_rect(fill = "white")) +
labs(x = "Ano/mês", y = "Total de casos", title = "Total de casos no estado de São Paulo")
# carregando pacotes
library(dplyr)
library(rstatix)
library(ggplot2)
cores <- rcartocolor::carto_pal(12, "Bold")
# set da pasta de trabalho
setwd("D:\\Mestrado\\1Sem_23\\Ferramentas computacionais\\projeto_final\\base_dados")
dados_covid_sp <- read.csv('dados_covid_sp.csv', sep = ";")
base_sp <- read.csv('sp.csv', sep = ";")
# Tratamento da base de dados
glimpse(dados_covid_sp)
dados_covid_sp$datahora <- as.Date(dados_covid_sp$datahora,
format = '%Y-%m-%d') #convertendo datahora para data
glimpse(dados_covid_sp)
# excluindo colunas que não iremos usar
dados_covid_sp_tratado <- select(dados_covid_sp, -c(2,6,9))
# verificando valores vazios
dados_covid_sp_tratado %>%
sapply(function(x) sum(is.na(x))) # valores NA
dados_covid_sp_tratado %>%
sapply(function(x) sum(is.nan(x))) # valores NAN
# Total de casos por ano/mes acumulado
dados_covid_sp_tratado$ano_mes <- format(dados_covid_sp_tratado$datahora, "%Y-%m")
casos_mes_ano <- dados_covid_sp_tratado %>%
group_by(datahora) %>%
summarise(total_casos = sum(casos))
# plot do gráfico: total de casos acumulado
casos_mes_ano %>%
ggplot(aes(x = datahora, y = total_casos)) +
geom_density(fill = cores[8], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
theme_bw()+
theme(panel.grid = element_blank(),  # Remove as linhas de grade
plot.background = element_rect(fill = "white")) +
labs(x = "Ano/mês", y = "Total de casos", title = "Total de casos no estado de São Paulo")
# Total de novos casos por dia
novos_casos_mes_ano <- dados_covid_sp_tratado %>%
group_by(datahora) %>%
summarise(novos_casos = sum(casos_novos))
novos_casos_mes_ano %>%
ggplot(aes(x = datahora, y = novos_casos)) +
geom_density(fill = cores[1], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
theme_bw()+
theme(panel.grid = element_blank(),  # Remove as linhas de grade
plot.background = element_rect(fill = "white")) +
labs(x = "Ano/mês", y = "Total de casos", title = "Novos casos por dia no estado de São Paulo")
# carregando pacotes
library(dplyr)
library(rstatix)
library(ggplot2)
cores <- rcartocolor::carto_pal(12, "Bold")
# set da pasta de trabalho
setwd("D:\\Mestrado\\1Sem_23\\Ferramentas computacionais\\projeto_final\\base_dados")
dados_covid_sp <- read.csv('dados_covid_sp.csv', sep = ";")
base_sp <- read.csv('sp.csv', sep = ";")
# Tratamento da base de dados
glimpse(dados_covid_sp)
# Tratamento da base de dados
glimpse(dados_covid_sp)
dados_covid_sp$datahora <- as.Date(dados_covid_sp$datahora,
format = '%Y-%m-%d') #convertendo datahora para data
glimpse(dados_covid_sp)
# excluindo colunas que não iremos usar
dados_covid_sp_tratado <- select(dados_covid_sp, -c(2,6,9))
# verificando valores vazios
dados_covid_sp_tratado %>%
sapply(function(x) sum(is.na(x))) # valores NA
dados_covid_sp_tratado %>%
sapply(function(x) sum(is.nan(x))) # valores NAN
# Total de casos por ano/mes acumulado
dados_covid_sp_tratado$ano_mes <- format(dados_covid_sp_tratado$datahora, "%Y-%m")
casos_mes_ano <- dados_covid_sp_tratado %>%
group_by(datahora) %>%
summarise(total_casos = sum(casos))
# plot do gráfico: total de casos acumulado
casos_mes_ano %>%
ggplot(aes(x = datahora, y = total_casos)) +
geom_density(fill = cores[8], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
theme_bw()+
theme(panel.grid = element_blank(),  # Remove as linhas de grade
plot.background = element_rect(fill = "white")) +
labs(x = "Ano/mês", y = "Total de casos", title = "Total de casos no estado de São Paulo")
# Total de novos casos por dia
novos_casos_mes_ano <- dados_covid_sp_tratado %>%
group_by(datahora) %>%
summarise(novos_casos = sum(casos_novos))
novos_casos_mes_ano %>%
ggplot(aes(x = datahora, y = novos_casos)) +
geom_density(fill = cores[1], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
theme_bw()+
theme(panel.grid = element_blank(),  # Remove as linhas de grade
plot.background = element_rect(fill = "white")) +
labs(x = "Ano/mês", y = "Total de casos", title = "Novos casos por dia no estado de São Paulo")
View(dados_covid_sp)
View(base_sp)
View(casos_data)
View(base_sp)
View(casos_data)
View(casos_mes_ano)
View(dados_covid_sp)
View(dados_covid_sp_tratado)
View(dados_covid_sp)
View(novos_casos_mes_ano)
# carregando pacotes
library(dplyr)
library(rstatix)
library(ggplot2)
# carregando pacotes
library(dplyr)
library(rstatix)
library(ggplot2)
cores <- rcartocolor::carto_pal(12, "Bold")
dados_covid_sp <- read.csv('dados_covid_sp.csv', sep = ";")
base_sp <- read.csv('sp.csv', sep = ";")
# Tratamento da base de dados
glimpse(dados_covid_sp)
dados_covid_sp$datahora <- as.Date(dados_covid_sp$datahora,
format = '%Y-%m-%d') #convertendo datahora para data
glimpse(dados_covid_sp)
# excluindo colunas que não iremos usar
dados_covid_sp_tratado <- select(dados_covid_sp, -c(2,6,9))
# verificando valores vazios
dados_covid_sp_tratado %>%
sapply(function(x) sum(is.na(x))) # valores NA
dados_covid_sp_tratado %>%
sapply(function(x) sum(is.nan(x))) # valores NAN
# Total de casos por ano/mes acumulado
dados_covid_sp_tratado$ano_mes <- format(dados_covid_sp_tratado$datahora, "%Y-%m")
casos_mes_ano <- dados_covid_sp_tratado %>%
group_by(datahora) %>%
summarise(total_casos = sum(casos))
# plot do gráfico: total de casos acumulado
casos_mes_ano %>%
ggplot(aes(x = datahora, y = total_casos)) +
geom_density(fill = cores[8], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
theme_bw()+
theme(panel.grid = element_blank(),  # Remove as linhas de grade
plot.background = element_rect(fill = "white")) +
labs(x = "Ano/mês", y = "Total de casos", title = "Total de casos no estado de São Paulo")
# Total de novos casos por dia
novos_casos_mes_ano <- dados_covid_sp_tratado %>%
group_by(datahora) %>%
summarise(novos_casos = sum(casos_novos))
novos_casos_mes_ano %>%
ggplot(aes(x = datahora, y = novos_casos)) +
geom_density(fill = cores[1], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
theme_bw()+
theme(panel.grid = element_blank(),  # Remove as linhas de grade
plot.background = element_rect(fill = "white")) +
labs(x = "Ano/mês", y = "Total de casos", title = "Novos casos por dia no estado de São Paulo")
View(base_sp)
View(dados_covid_sp)
install.packages("sf")
install.packages("geobr")
install.packages("rio")
library(geobr)
library(ggplot2)
library(sf)
library(geobr)
library(ggplot2)
library(dplyr)
library(rio)
install.packages("arrow")
install.packages(c("feather", "fst", "hexView", "readODS", "rmatio", "xml2", "pzfx"))
library(readr)
metadata <- download_metadata()
# carregando os pacotes necessários para o exemplo
library(sf)
library(geobr)
library(ggplot2)
library(dplyr)
library(rio)
library(readr)
metadata <- download_metadata()
# carregando os pacotes necessários para o exemplo
library(geobr)
library(ggplot2)
library(sf)
library(dplyr)
library(rio)
library(readr)
df <- download_metadata()
detach("package:geobr", unload = TRUE)
library(geobr)
df <- download_metadata()
df <- download_metadata()
# carregando os pacotes necessários para o exemplo
library(geobr)
library(ggplot2)
library(sf)
library(dplyr)
library(rio)
library(readr)
# carregando os pacotes necessários para o exemplo
library(geobr)
library(ggplot2)
library(sf)
library(dplyr)
library(rio)
library(readr)
source("C:/Users/ffand/Documents/Estudos/R/Pacotes/geobr/geobr_mato_grosso_do_sul.R")
# carregando pacotes
library(dplyr)
library(rstatix)
library(ggplot2)
cores <- rcartocolor::carto_pal(12, "Bold")
dados_covid_sp <- read.csv('dados_covid_sp.csv', sep = ";")
base_sp <- read.csv('sp.csv', sep = ";")
# Tratamento da base de dados
glimpse(dados_covid_sp)
dados_covid_sp$datahora <- as.Date(dados_covid_sp$datahora,
format = '%Y-%m-%d') #convertendo datahora para data
glimpse(dados_covid_sp)
# excluindo colunas que não iremos usar
dados_covid_sp_tratado <- select(dados_covid_sp, -c(2,6,9))
# verificando valores vazios
dados_covid_sp_tratado %>%
sapply(function(x) sum(is.na(x))) # valores NA
dados_covid_sp_tratado %>%
sapply(function(x) sum(is.nan(x))) # valores NAN
# Total de casos por ano/mes acumulado
dados_covid_sp_tratado$ano_mes <- format(dados_covid_sp_tratado$datahora, "%Y-%m")
casos_mes_ano <- dados_covid_sp_tratado %>%
group_by(datahora) %>%
summarise(total_casos = sum(casos))
# plot do gráfico: total de casos acumulado
casos_mes_ano %>%
ggplot(aes(x = datahora, y = total_casos)) +
geom_density(fill = cores[8], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
theme_bw()+
theme(panel.grid = element_blank(),  # Remove as linhas de grade
plot.background = element_rect(fill = "white")) +
labs(x = "Ano/mês", y = "Total de casos", title = "Total de casos no estado de São Paulo")
# Total de novos casos por dia
novos_casos_mes_ano <- dados_covid_sp_tratado %>%
group_by(datahora) %>%
summarise(novos_casos = sum(casos_novos))
novos_casos_mes_ano %>%
ggplot(aes(x = datahora, y = novos_casos)) +
geom_density(fill = cores[1], stat = "identity", alpha = 0.3) +
scale_color_manual(values = cores) +
theme_bw()+
theme(panel.grid = element_blank(),  # Remove as linhas de grade
plot.background = element_rect(fill = "white")) +
labs(x = "Ano/mês", y = "Total de casos", title = "Novos casos por dia no estado de São Paulo")
View(base_sp)
View(dados_covid_sp)
View(base_sp)
glimpse(dados_covid_sp)
View(dados_covid_sp_tratado)
casos_mes_ano <- dados_covid_sp_tratado %>%
group_by(datahora) %>%
summarise(total_casos = sum(casos))
casos_mes_ano <- dados_covid_sp_tratado %>%
group_by(datahora) %>%
summarise(total_casos = sum(casos))
View(casos_mes_ano)
library(geobr)
all_mun_sp <- read_municipality(code_muni = 35, year = 2010)
# plot do mapa
ggplot() +
geom_sf(data=all_mun_sp, fill="#2D3E50", color="#FEBF57", size=.15, show.legend = FALSE) +
labs(title="Municípios de São Paulo, 2010", size=12) +
theme_minimal() +
no_axis
library(geobr)
library(sf)
library(rio)
all_mun_sp <- read_municipality(code_muni = 35, year = 2010)
# plot do mapa
ggplot() +
geom_sf(data=all_mun_sp, fill="#2D3E50", color="#FEBF57", size=.15, show.legend = FALSE) +
labs(title="Municípios de São Paulo, 2010", size=12) +
theme_minimal() +
no_axis
library(ggplot2)
library(geobr)
library(sf)
library(rio)
all_mun_sp <- read_municipality(code_muni = 35, year = 2010)
# plot do mapa
ggplot() +
geom_sf(data=all_mun_sp, fill="#2D3E50", color="#FEBF57", size=.15, show.legend = FALSE) +
labs(title="Municípios de São Paulo, 2010", size=12) +
theme_minimal() +
no_axis
# plot do mapa
ggplot() +
geom_sf(data=all_mun_sp, fill="#2D3E50", color="#FEBF57", size=.15, show.legend = FALSE) +
labs(title="Municípios de São Paulo, 2010", size=12) +
theme_minimal()
# plot do mapa
ggplot() +
geom_sf(data=all_mun_sp, fill="#2D3E50", color="#FEBF57", size=.15, show.legend = FALSE) +
labs(title="Municípios de São Paulo, 2010", size=12) +
theme_minimal()+
theme(plot.title = element_text(hjust = 0.5))
# plot do mapa
ggplot() +
geom_sf(data=all_mun_sp, fill="#2D3E50", color="#FEBF57", size=.15, show.legend = FALSE) +
labs(title="Municípios de São Paulo, 2010", size=12) +
scale_fill_distiller(palette = "YlOrRd")
# plot do mapa
ggplot() +
geom_sf(data=all_mun_sp, fill="#2D3E50", color="#FEBF57", size=.15, show.legend = FALSE) +
labs(title="Municípios de São Paulo, 2010", size=12) +
scale_fill_distiller(palette = "YlOrRd")+
theme_minimal()+
theme(plot.title = element_text(hjust = 0.5))
# plot do mapa
ggplot() +
geom_sf(data=all_mun_sp, size=.15, show.legend = FALSE) +
labs(title="Municípios de São Paulo, 2010", size=12) +
scale_fill_distiller(palette = "YlOrRd")+
theme_minimal()+
theme(plot.title = element_text(hjust = 0.5))
# plot do mapa
ggplot() +
geom_sf(data=all_mun_sp, size=.15, show.legend = FALSE) +
labs(title="Municípios de São Paulo, 2010", size=12) +
theme_minimal()+
theme(plot.title = element_text(hjust = 0.5))
# plot do mapa
ggplot() +
geom_sf(data=all_mun_sp, fill="#2D3E50", color="#FEBF57", size=.15, show.legend = FALSE) +
labs(title="Municípios de São Paulo, 2010", size=12) +
theme_minimal()+
theme(plot.title = element_text(hjust = 0.5))
View(casos_mes_ano)
setwd("~/Ferramentas_Modelagem/Trabalho/projeto_ferramentas_final/base_dados")
